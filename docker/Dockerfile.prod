# Dockerfile para CrystoDolar Frontend
# Multi-stage build optimizado para producción

# ========================================
# STAGE 1: Dependencies
# ========================================
FROM node:22-alpine AS deps
# Verificar https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine para entender por qué libc6-compat podría ser necesario.
RUN apk add --no-cache libc6-compat curl
WORKDIR /app

# Instalar pnpm usando npm (más compatible con Alpine)
RUN npm install -g pnpm@latest

# Instalar dependencias basadas en el archivo de lock preferido
COPY package.json pnpm-lock.yaml* ./
RUN pnpm install

# ========================================
# STAGE 2: Builder
# ========================================
FROM node:22-alpine AS builder
RUN apk add --no-cache curl
WORKDIR /app

# Instalar pnpm en el stage de builder
RUN npm install -g pnpm@latest

COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Variables de entorno para build
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production

# Build de la aplicación
RUN pnpm run build

# ========================================
# STAGE 3: Runner
# ========================================
FROM node:22-alpine AS runner
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

# Crear usuario no-root para seguridad
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copiar archivos necesarios
COPY --from=builder /app/public ./public

# Establecer la propiedad correcta para archivos estáticos
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Copiar archivos de build
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Comando para ejecutar la aplicación
CMD ["node", "server.js"]
